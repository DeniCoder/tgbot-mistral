import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import F
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ Mistral
from mistralai import Mistral

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–æ–¥–µ–ª–µ–π Mistral (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã)
TEXT_MODEL = "ministral-8b-2410"         # –¢–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
IMAGE_MODEL = "mistral-medium-2505"      # –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Mistral ---
client = Mistral(api_key=MISTRAL_API_KEY)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    kb = ReplyKeyboardBuilder().add(types.KeyboardButton(text="üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç"))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ ---
@dp.message(F.text)
async def handle_prompt(message: types.Message):
    user_prompt = message.text.strip()
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Mistral ---
    try:
        chat_response = client.chat.complete(
            model=TEXT_MODEL,
            messages=[
                {"role": "system", "content": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ—Å—Ç –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ."},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=180,
            temperature=0.8
        )
        generated_text = chat_response.choices[0].message.content
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Mistral ---
    try:
        # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º image_generation
        image_agent = client.beta.agents.create(
            model=IMAGE_MODEL,
            name="Image Generation Agent",
            description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ –ø–æ—Å—Ç–∞–º.",
            instructions="–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫.",
            tools=[{"type": "image_generation"}],
            completion_args={
                "temperature": 0.3,
                "top_p": 0.95
            }
        )

        img_response = client.beta.conversations.start(
            agent_id=image_agent.id,
            inputs=user_prompt
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ outputs, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        # –û–±—ã—á–Ω–æ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç outputs - MessageOutputEntry
        outputs = img_response.outputs
        msg_entry = None
        for entry in outputs:
            if getattr(entry, 'type', None) == 'message.output':
                msg_entry = entry
                break
        if not msg_entry:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω message.output –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏.")
            return

        file_id = None
        text_part = None
        for part in getattr(msg_entry, 'content', []):
            if getattr(part, 'type', None) == 'text':
                text_part = getattr(part, 'text', None)
            elif getattr(part, 'type', None) == 'tool_file':
                file_id = getattr(part, 'file_id', None)

        if not file_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏.")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_bytes = client.files.download(file_id=file_id).read()
        image_path = "image_generated.png"
        with open(image_path, "wb") as f:
            f.write(file_bytes)

    except Exception as e:
        if "rate limit reached" in str(e):
            await message.answer(
                f"–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
                f"–ù–æ –≤–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç: {generated_text}"
            )
            return
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–¥–∏–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        input_file = FSInputFile(image_path)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–º–µ–Ω–Ω–æ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
        caption_str = (generated_text or "–ü–æ—Å—Ç –≥–æ—Ç–æ–≤!").strip()
        await message.answer_photo(
            input_file,
            caption=caption_str
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if os.path.exists(image_path):
            os.remove(image_path)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    asyncio.run(dp.start_polling(bot))
